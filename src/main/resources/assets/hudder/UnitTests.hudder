
||INPUT||Order of operations
{6/2*(1+2)}
||EXPECT||
9

||INPUT||Basic text
Basic Bitch Test
||EXPECT||
Basic Bitch Test

||INPUT||Case insensitivity in variables
{vAr=1} {VaR}
||EXPECT||
1 1

||INPUT||Type casting
{str(int("10"),false)}
||EXPECT||
10.0

||INPUT||Text concatination
{concat(str(10,true), "test")}
||EXPECT||
10test

||INPUT||Text substring
{substring("Long text", 1, 4)}
||EXPECT||
ong

||INPUT||Text repeat
{repeat("Repeat", 2)}
||EXPECT||
RepeatRepeat

||INPUT||Text length
{length("Length")}
||EXPECT||
6

||INPUT||Trigo Functions
{sin(69)} {cos(69)} {tan(69)}
||EXPECT||
-0.11478481378318722 0.9933903797222716 -0.11554854579453279

||INPUT||Math Functions
{abs(-69)} {floor(69.7)} {ceiling(68.7)} {sqrt(4)} {pow(2,8)} {min(1,20)} {max(1,20)} {truncate(1.69, 1)} {rng(69,420,1)}
||EXPECT||
69 69 69 2 256 1 20 1.6 325.5382449368551

||INPUT||Misc Functions
{exists("hud")} {strwidth("hud")}
||EXPECT||
true 18

||INPUT||Basic addition
{1+1}
||EXPECT||
2

||INPUT||Basic setting addition
{r=1+1} {r}
||EXPECT||
2 2

||INPUT||Comparing unset values
{unsetval==unset} {unsetval==10} {unsetval==0} {unsetval>0} {unsetval<0} {unsetval!=0} {unsetval>=0} {unsetval<=0}
||EXPECT||
true false true false false false true true

||INPUT||Advanced if
#if testif==0
	{testif=1}
{testif}
||EXPECT||
1

||INPUT||String with quotes
{"1 \"2\" 3"}
||EXPECT||
1 "2" 3

||INPUT||String case sensitivity
{"CaSE SenSitive"} {r="CaSE SenSitive"} {r}
||EXPECT||
CaSE SenSitive CaSE SenSitive CaSE SenSitive

||INPUT||Nested conditions
{testping=20}
%testping>5, "&6PING: &%testping>=400,\"4\",testping>=100,\"e\",\"2\"%{testping}"%
||EXPECT||
20
&6PING: &220

||INPUT||Putall method
#def putall, string, number, boolean
	{str=arg1}
	{num=arg2}
	{bool=arg3}
;putall, "text", 10, false;
{str} {num} {bool}
||EXPECT||
text 10 false

||INPUT||Divide method
#def divide, number, number
	{result=arg1/arg2}
;divide, 4, 2;
{result}
||EXPECT||
2

||INPUT||Newlines


||EXPECT||

